<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.2.0">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off()</l>
<c></c>
<c></c>
<l>extWinOnOff := 1</l>
<l>ModelUnion_0_0_2_Reader := 'ModelUnion_0_0_2_Reader.txt'</l>
<l>open_file(ModelUnion_0_0_2_Reader, 'input', FileHandleIn)</l>
<l>IsEOF1 := 0</l>
<l>FilesName := []</l>
<l>while (IsEOF1 != 1)</l>
<l>  fread_line (FileHandleIn, OutLine, IsEOF1)</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'filename1Dim', Position)</l>
<c>  </c>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ',', strSplitFirst)</l>
<l>      tuple_split(strSplitFirst, '\\', strSplitSecond)</l>
<l>      tuple_length(strSplitSecond, strSplitSecondLength)</l>
<l>      for Index := 0 to strSplitSecondLength -1 by 1</l>
<l>          tuple_strrstr(strSplitSecond[Index], 'om3', Position)</l>
<l>          if(Position != -1)</l>
<l>              FilesName := [FilesName, strSplitSecond[Index]]</l>
<l>          endif</l>
<l>          *tuple_split(strSplitFirst, '\\', strSplitSecond)</l>
<l>          *tuple_length(strSplitSecond, strSplitSecondLength)</l>
<l>          *filename1Dim_buf := strSplitSecond[strSplitSecondLength-1]</l>
<l>      endfor</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<c>  </c>
<l>  tuple_strstr(OutLine, 'smoothLv_val', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      SmoothLevel_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(SmoothLevel_buf, strLength)</l>
<l>      tuple_str_first_n(SmoothLevel_buf, strLength-2, SmoothLevel)</l>
<l>      tuple_number(SmoothLevel, SmoothLevel)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'unionParam', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      UnionParam_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(UnionParam_buf, strLength)</l>
<l>      tuple_str_first_n(UnionParam_buf, strLength-2, UnionParam)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'polygonKnnCnt', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      polygonKnnCnt_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(polygonKnnCnt_buf, strLength)</l>
<l>      tuple_str_first_n(polygonKnnCnt_buf, strLength-2, polygonKnnCnt)</l>
<l>      tuple_number(polygonKnnCnt,polygonKnnCnt)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'polygonKnnRadiusParam', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      polygonKnnRadiusParam_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(polygonKnnRadiusParam_buf, strLength)</l>
<l>      tuple_str_first_n(polygonKnnRadiusParam_buf, strLength-2, polygonKnnRadiusParam)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'polygonKnnRadiusValue', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      polygonKnnRadiusValue_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(polygonKnnRadiusValue_buf, strLength)</l>
<l>      tuple_str_first_n(polygonKnnRadiusValue_buf, strLength-2, polygonKnnRadiusValue)</l>
<l>      tuple_number(polygonKnnRadiusValue,polygonKnnRadiusValue)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'surfaceRemoveValue', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      surfaceRemoveValue_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(surfaceRemoveValue_buf, strLength)</l>
<l>      tuple_str_first_n(surfaceRemoveValue_buf, strLength-2, surfaceRemoveValue)</l>
<l>      tuple_number(surfaceRemoveValue,surfaceRemoveValue)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'greedy_mesh_dilationValue', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      greedy_mesh_dilationValue_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(greedy_mesh_dilationValue_buf, strLength)</l>
<l>      tuple_str_first_n(greedy_mesh_dilationValue_buf, strLength-2, greedy_mesh_dilationValue)</l>
<l>      tuple_number(greedy_mesh_dilationValue,greedy_mesh_dilationValue)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'sampleMethod', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      sampleMethod_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(sampleMethod_buf, strLength)</l>
<l>      tuple_str_first_n(sampleMethod_buf, strLength-2, sampleMethod)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'sampleValue', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      sampleValue_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(sampleValue_buf, strLength)</l>
<l>      tuple_str_first_n(sampleValue_buf, strLength-2, sampleValue)</l>
<l>      tuple_number(sampleValue, sampleValue)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<c>  </c>
<l>  tuple_strstr(OutLine, 'samplesurfValue', Position)</l>
<l>  if(Position == 0)</l>
<l>      tuple_split(OutLine, ' ', strSplit)</l>
<l>      tuple_length(strSplit, strSplitLength)</l>
<l>      samplesurfValue_buf := strSplit[strSplitLength-1]</l>
<l>      tuple_strlen(samplesurfValue_buf, strLength)</l>
<l>      tuple_str_first_n(samplesurfValue_buf, strLength-2, samplesurfValue)</l>
<l>      tuple_number(samplesurfValue,samplesurfValue)</l>
<l>      Postion := -1</l>
<l>  endif</l>
<l>endwhile</l>
<l>close_file(FileHandleIn)</l>
<l>dev_open_window(0, 0, 1920/2, 1200/2, 'black', Window3D)</l>
<l>dev_update_off()</l>
<l>*WinWidth := 1920 / 2</l>
<l>*WinHeight := 1200 / 2</l>
<l>*dev_open_window (0, 0, WinWidth, WinHeight, 'black', Window3D)</l>
<c></c>
<l>if(extWinOnOff == 1)</l>
<l>    dev_clear_window()    </l>
<l>endif</l>
<c></c>
<l>RegisteredOM3s := []</l>
<l>PreviousOM3 := []</l>
<l>CollectedAffineObjects := []</l>
<l>*HomMat3DCompose := []</l>
<l>tuple_length(FilesName, Filesnum)</l>
<c></c>
<l>*if(extWinOnOff == 1)</l>
<l>*    dev_set_window (Window3D)</l>
<l>*    set_window_extents(Window3D, 0, 0, 1920, 1200)</l>
<l>*    dev_open_window(0, 0, 1920, 1200, 'black', Window3D)</l>
<l>    *read_image(RGBA,'DummyDisp')</l>
<l>    *dev_display(RGBA)</l>
<l>*endif</l>
<l>cnt := 1</l>
<l>for Index := 0 to Filesnum-1 by 1</l>
<c>    </c>
<l>    if (Index == 0)</l>
<l>        dev_set_window (Window3D)</l>
<l>        read_object_model_3d( FilesName[Index], 'm', [], [], PreviousOM3, Status)</l>
<l>        smooth_object_model_3d (PreviousOM3, 'mls', ['mls_kNN', 'mls_force_inwards'], [SmoothLevel, 'true'], PreviousOM3)</l>
<l>        *smooth_object_model_3d (PreviousOM3, 'mls', 'mls_kNN', SmoothLevel, PreviousOM3)</l>
<l>        copy_object_model_3d (PreviousOM3, 'all', CollectedAffineObjects)</l>
<l>        Offsets := []</l>
<l>        hom_mat3d_identity (HomMat3DStart)</l>
<l>        HomMat3DCompose := HomMat3DStart</l>
<l>        if(extWinOnOff == 1)</l>
<c>            * Displaying the 3D color point cloud, press the button to continue</c>
<l>            Title := cnt +'/'+ (Filesnum) + '번째 이미지'</l>
<l>            Instructions[0] := 'Rotate: Left button'</l>
<l>            Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>            Instructions[2] := 'Move:   Ctrl  + left button'</l>
<c>            </c>
<l>            *visualize_object_model_3d (Window3D, PreviousOM3, [], [], [], [], Title, [], Instructions, PoseOut)</l>
<l>            dev_clear_window()</l>
<l>        endif</l>
<l>        RegisteredOM3s := PreviousOM3</l>
<l>        cnt := cnt + 1</l>
<l>    else</l>
<l>        read_object_model_3d (FilesName[Index], 'm', [], [], ObjectModel3D, Status)</l>
<l>        smooth_object_model_3d (ObjectModel3D, 'mls', ['mls_kNN', 'mls_force_inwards'], [SmoothLevel, 'true'], ObjectModel3D)</l>
<l>*        smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', SmoothLevel, ObjectModel3D)</l>
<c>        * Skip small objects, because the registration will likely fail</c>
<l>        get_object_model_3d_params (ObjectModel3D, 'num_points', GenParamValue)</l>
<l>*        if (GenParamValue &lt; 1000)</l>
<l>*        continue</l>
<l>*        endif</l>
<c>        * Register the last successful match and the current model</c>
<l>        register_object_model_3d_pair (ObjectModel3D, PreviousOM3, 'matching', 'default_parameters', UnionParam, Pose, Score)</l>
<c>        * If registration failed, ignore this view</c>
<l>*        if (|Pose| == 0 or Score &lt; 0.7)</l>
<l>*        continue</l>
<l>*        endif</l>
<c>        * Accumulate the result</c>
<l>        pose_to_hom_mat3d (Pose, HomMat3D)</l>
<l>        RegisteredOM3s := [RegisteredOM3s,ObjectModel3D]</l>
<l>        Offsets := [Offsets,HomMat3D]</l>
<c>        * Create 3D object model for visualization</c>
<l>        hom_mat3d_compose (HomMat3DCompose, HomMat3D, HomMat3DCompose)</l>
<l>        affine_trans_object_model_3d (ObjectModel3D, HomMat3DCompose, ObjectModel3DAffineTrans)</l>
<l>        CollectedAffineObjects := [ObjectModel3DAffineTrans,CollectedAffineObjects]</l>
<c>        * Prepare next round</c>
<l>        PreviousOM3 := ObjectModel3D</l>
<c>        * </c>
<c>        * Show all 3D object models</c>
<l>        if(extWinOnOff == 1)</l>
<l>            dev_set_window (Window3D)</l>
<l>            Title := cnt +'/'+ (Filesnum) + '번째 이미지'</l>
<l>            MSG[0] := 'Pose:' + Pose[0]</l>
<l>            MSG[1] := 'Pose:' + Pose[1]</l>
<l>            MSG[2] := 'Pose:' + Pose[2]</l>
<l>            MSG[3] := 'Pose:' + Pose[3]</l>
<l>            MSG[4] := 'Pose:' + Pose[4]</l>
<l>            MSG[5] := 'Pose:' + Pose[5]</l>
<l>            MSG[6] := 'Pose:' + Pose[6]</l>
<l>            MSG[7] := 'Score:' + Score</l>
<l>            *visualize_object_model_3d (Window3D, CollectedAffineObjects, [], [], [], [], Title, [], MSG, PoseOut)</l>
<l>            dev_clear_window()</l>
<l>        endif</l>
<l>        cnt := cnt + 1</l>
<l>    endif</l>
<c>    </c>
<l>*    disp_object_model_3d_safe (Window3D, CollectedAffineObjects, CamParam1, PoseVisualize, VisualizeParameterNames, VisualizeParameterValues)</l>
<l>endfor</l>
<c></c>
<c></c>
<l>count_seconds (T0)</l>
<c></c>
<l>register_object_model_3d_global (RegisteredOM3s, Offsets, 'previous', [], 'max_num_iterations', 1, HomMat3DRefined, Score)</l>
<c>* Apply results</c>
<l>affine_trans_object_model_3d (RegisteredOM3s, HomMat3DRefined, GloballyRegisteredOM3s)</l>
<c>* </c>
<c></c>
<c></c>
<c></c>
<l>*visualize_object_model_3d (Window3D, GloballyRegisteredOM3s, [], [], [], [], Title, [], [], PoseOut)</l>
<c></c>
<l>union_object_model_3d (GloballyRegisteredOM3s, 'points_surface', UnionOptimized)</l>
<c></c>
<c>*fuse_object_model_3d</c>
<l>*MinNumPoints := 5</l>
<l>*SampleDistance := 0.5</l>
<l>*smooth_object_model_3d (UnionOptimized, 'mls', 'mls_force_inwards', 'true', SmoothObject3D)</l>
<l>smooth_object_model_3d (UnionOptimized, 'mls', ['mls_kNN', 'mls_force_inwards'], [SmoothLevel, 'true'], SmoothObject3D)</l>
<c></c>
<l>*triangulate_object_model_3d (SmoothObject3D, 'greedy', [], [], Surface3D, Information)</l>
<c></c>
<l>if(polygonKnnCnt == 0 or polygonKnnCnt == 0.0)</l>
<l>    greed_Knn_Param := []</l>
<l>    polygonKnnCnt := []</l>
<l>else</l>
<l>    greed_Knn_Param := 'greedy_kNN'</l>
<l>endif</l>
<c></c>
<l>if(polygonKnnRadiusParam == [] or polygonKnnRadiusParam == '')</l>
<l>    greedy_radius_type_Param := []</l>
<l>    polygonKnnRadiusParam := []</l>
<l>else</l>
<l>    greedy_radius_type_Param := 'greedy_radius_type'</l>
<l>endif</l>
<c></c>
<l>if(polygonKnnRadiusValue == 0 or polygonKnnRadiusValue == 0.0)</l>
<l>    greedy_radius_value_Param := []</l>
<l>    polygonKnnRadiusValue := []</l>
<l>else</l>
<l>    greedy_radius_value_Param := 'greedy_radius_value'</l>
<l>endif</l>
<l>if(surfaceRemoveValue == 0 or surfaceRemoveValue == 0.0)</l>
<l>    greedy_remove_small_surfaces_Param := []</l>
<l>    surfaceRemoveValue := []</l>
<l>else</l>
<l>    greedy_remove_small_surfaces_Param := 'greedy_remove_small_surfaces'</l>
<l>endif</l>
<c></c>
<l>if (greedy_mesh_dilationValue == 0 or greedy_mesh_dilationValue == 0.0)</l>
<l>    greedy_mesh_dilation_Param := []</l>
<l>    greedy_mesh_dilationValue := []</l>
<l>else</l>
<l>    greedy_mesh_dilation_Param := 'greedy_mesh_dilation'</l>
<l>endif</l>
<c></c>
<l>*triangulate_object_model_3d (SmoothObject3D, 'greedy', [greed_Knn_Param,  greedy_radius_type_Param, greedy_radius_value_Param, greedy_remove_small_surfaces_Param, greedy_mesh_dilation_Param], [polygonKnnCnt, polygonKnnRadiusParam, polygonKnnRadiusValue, surfaceRemoveValue, greedy_mesh_dilationValue], Surface3D, Information)</l>
<l>Surface3D := SmoothObject3D </l>
<l>sample_object_model_3d(Surface3D, sampleMethod, sampleValue, [], [], SampleExact)</l>
<l>*count_seconds (T1)</l>
<l>*TimeForSampling := (T1 - T0)</l>
<c></c>
<c>* Creating a HALCON surface-based matching model</c>
<l>*count_seconds (T0)</l>
<l>*create_surface_model (SampleExact, 0.01, 'train_3d_edges', 'true', SFM)</l>
<l>if(extWinOnOff == 1)</l>
<l>    dev_set_window(Window3D)</l>
<l>    Title := '최종 합성 모델. 방향성 주입을 위해 모델의 방향을 마우스 클릭으로 선정하고 Continue버튼 클릭'</l>
<l>    visualize_object_model_3d (Window3D, SampleExact, [], [], [], [], Title, [], [], PoseOut)</l>
<l>endif</l>
<l>rigid_trans_object_model_3d (SampleExact, PoseOut, SampleExact)</l>
<l>*create_surface_model (SampleExact, samplesurfValue, [],[], SFM)</l>
<l>create_surface_model (SampleExact, samplesurfValue, [], [], SFM)</l>
<l>*count_seconds (T1)</l>
<l>*TimeForCreating := (T1 - T0)</l>
<l>Title := '최종 모델'</l>
<l>Instructions := []</l>
<l>Instructions[0] := 'Rotate: Left button'</l>
<l>Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>get_surface_model_param(SFM, 'sampled_model' , SFMVIEW)</l>
<l>visualize_object_model_3d (Window3D, SFMVIEW, [], [], [], [], Title, [], Instructions, PoseOut)</l>
<c></c>
<l>RetSFM := SFM</l>
<l>RetOM3 := SampleExact</l>
<c></c>
<c>* Loading the HALCON 3D object model</c>
<l>*read_object_model_3d(Filename, 'm', [], [], SampleExact, Status)</l>
<c></c>
<c>* Loading the HALCON surface-based matching model</c>
<l>*read_surface_model(Filename, SFM)</l>
<c></c>
<c>* Displaying the 3D color point cloud, press the button to continue</c>
<l>*Instructions[0] := 'Rotate: Left button'</l>
<l>*Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>*Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>*Instructions[3] := 'Last?'</l>
<l>*disp_message (Window3D, Instructions, 'window', 12, 12, 'red', 'true')    </l>
<l>*visualize_object_model_3d (Window3D, SampleExact, [], [], [], [], [], [], [], PoseOut)</l>
<l>return ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
