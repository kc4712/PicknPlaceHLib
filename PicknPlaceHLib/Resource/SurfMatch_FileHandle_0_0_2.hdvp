<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.2.0">
<procedure name="SurfMatch_FileHandle_0_0_2">
<interface>
<oo>
<par name="RGB_Scene" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="plyFilename" base_type="ctrl" dimension="0"/>
<par name="sfmFileName" base_type="ctrl" dimension="0"/>
<par name="om3FileName" base_type="ctrl" dimension="0"/>
<par name="sampleMethod" base_type="ctrl" dimension="0"/>
<par name="sampleValue" base_type="ctrl" dimension="0"/>
<par name="smoothlv_val" base_type="ctrl" dimension="0"/>
<par name="RelSamplingDistance" base_type="ctrl" dimension="0"/>
<par name="KeyPointFraction" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="NumMatch" base_type="ctrl" dimension="0"/>
<par name="FindMethod" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MatchResult" base_type="ctrl" dimension="0"/>
<par name="ObjectModel_Scene" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Result" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>dev_update_off ()</l>
<c></c>
<l>*dev_clear_window()</l>
<l>*WinWidth := 1920 / 2 </l>
<l>*WinHeight := 1200 / 2</l>
<l>*dev_open_window(0, 0, WinWidth, WinHeight, 'black', Window3D) </l>
<l>tuple_add (sfmFileName, '', SFMFilename)</l>
<l>read_surface_model (SFMFilename, SFM)</l>
<c></c>
<c>* Loading the HALCON 3D object model (used for visualization purpose)</c>
<l>tuple_add (om3FileName, '', ObjectModel3DFilename)</l>
<l>read_object_model_3d (ObjectModel3DFilename, 'm', [], [], ObjectModel3D, Status)</l>
<c></c>
<c>* Computing 3D object model normals, which is necessary for surface-based 3D matching</c>
<l>count_seconds (T0)</l>
<l>tuple_add(plyFilename,'', SceneFilename)</l>
<l>read_object_model_3d (SceneFilename, 'm', ['xyz_map_width'], [1920], ObjectModel_Scene, Status)</l>
<l>*visualize_object_model_3d (Window3D, [ObjectModel3D_Scene], [], [], [], [], [], [], [], PoseOut)</l>
<l>*stop()</l>
<l>get_object_model_3d_params (ObjectModel_Scene, 'red', red)</l>
<l>get_object_model_3d_params (ObjectModel_Scene, 'green', green)</l>
<l>get_object_model_3d_params (ObjectModel_Scene, 'blue', blue)</l>
<l>set_object_model_3d_attrib (ObjectModel_Scene, '&amp;red', 'points', red, ObjectModel_Scene)</l>
<l>set_object_model_3d_attrib (ObjectModel_Scene, '&amp;green', 'points', green, ObjectModel_Scene)</l>
<l>set_object_model_3d_attrib (ObjectModel_Scene, '&amp;blue', 'points', blue, ObjectModel_Scene)</l>
<c></c>
<l>object_model_3d_to_xyz( X, Y, Z, ObjectModel_Scene, 'from_xyz_map', [], [])  </l>
<l>get_image_size (X, Width, Height)</l>
<l>gen_image_const (R, 'real', Width, Height)</l>
<l>gen_image_const (G, 'real', Width, Height)</l>
<l>gen_image_const (B, 'real', Width, Height)</l>
<l>get_domain (R, Domain)</l>
<l>get_region_points (Domain, Rows, Columns)</l>
<l>set_grayval (R, Rows, Columns, red)</l>
<l>set_grayval (G, Rows, Columns, green)</l>
<l>set_grayval (B, Rows, Columns, blue)</l>
<l>compose3 (R, G, B, RGBA)</l>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel_Scene)</l>
<c></c>
<l>sample_object_model_3d (ObjectModel_Scene, sampleMethod, sampleValue, [], [], ObjectModel_Scene)</l>
<l>smooth_object_model_3d (ObjectModel_Scene, 'mls', 'mls_kNN', smoothlv_val, ObjectModel_Scene)</l>
<c></c>
<l>*count_seconds (T1)</l>
<l>*TimeForSampling := (T1 - T0)</l>
<c></c>
<c>* Object detection and pose estimation based on surface-based 3D matching</c>
<l>*count_seconds (T0)</l>
<c></c>
<l>*RelSamplingDistance := 0.1</l>
<c>* KeyPointFraction - additional downsampling for the detection (1 = all points used)</c>
<l>*KeyPointFraction := 0.2</l>
<c>* MinScore - minimum score for the detection</c>
<l>*MinScore := 0.35</l>
<c></c>
<c></c>
<l>find_surface_model (SFM, ObjectModel_Scene, RelSamplingDistance, KeyPointFraction, MinScore, 'true', ['num_matches', 'scene_normal_computation'], [NumMatch, FindMethod], Pose, Score, SurfaceMatchingResultID)</l>
<c></c>
<l>*find_surface_model_image (RGBA, SFM, ObjectModel_Scene, RelSamplingDistance, KeyPointFraction, MinScore, 'true', ['num_matches','scene_normal_computation'], [NumMatch,FindMethod], Pose, Score, SurfaceMatchingResultID)</l>
<c></c>
<l>*count_seconds (T1)</l>
<l>*TimeForMatching := (T1 - T0)</l>
<l>if (Score!=[])</l>
<c>    * Preparing the result(s)</c>
<l>    if (Score[0] &lt; MinScore)</l>
<l>        return ()</l>
<l>    endif</l>
<l>    tuple_length(Score, SuccessNum)</l>
<l>    VisRotationCenters := []</l>
<l>    CPose := []</l>
<l>    StartNUM := 0</l>
<l>    EndNUM := 6</l>
<l>    for Index := 0 to SuccessNum-1 by 1</l>
<l>            *CPose[Index] := Pose[0:6]    </l>
<l>            CPose := Pose[StartNUM:EndNUM]</l>
<l>            rigid_trans_object_model_3d (ObjectModel3D, CPose, ObjectModel3D_Result)</l>
<l>            get_object_model_3d_params (ObjectModel3D_Result, 'center', VisRotationCenter)</l>
<l>            VisRotationCenters := [VisRotationCenters,VisRotationCenter]</l>
<l>            StartNUM := StartNUM + 7</l>
<l>            EndNUM := EndNUM + 7</l>
<l>    endfor</l>
<l>    rigid_trans_object_model_3d (ObjectModel3D, Pose, ObjectModel3D_ResultImg)</l>
<l>*     pose_to_hom_mat3d (CPose, CHomMat3D)</l>
<l>*     affine_trans_object_model_3d (ObjectModel3D, CHomMat3D, ObjectModel3DAffineTrans)</l>
<l>*    get_object_model_3d_params (ObjectModel3D_Result, 'center', VisRotationCenter)</l>
<l>*     get_object_model_3d_params (ObjectModel3D, 'center', VisRotationCenter1)</l>
<c></c>
<l>*     ParFitting := ['primitive_type','fitting_algorithm','output_point_coord']</l>
<l>*     ValFitting := ['all','least_squares_huber','true']</l>
<c>    * Apply the fitting</c>
<l>*     fit_primitives_object_model_3d (ObjectModel3D_Result, ParFitting, ValFitting, ObjectModel3DOutID)</l>
<l>*     get_object_model_3d_params (ObjectModel3DOutID, 'primitive_pose', PosePlanes)</l>
<c>    * Cam 2D RGB와 3D PCL의 시작 위치 차이</c>
<c>    * X: 38.784mm, Y: 0.0mm Z:259.511mm , 1.5 deg</c>
<l>*     get_object_model_3d_params (ObjectModel_Scene, 'center', CenterParam)</l>
<c></c>
<c>    * Visualizing matching scene and key points</c>
<l>*     Message := 'Original scene points (white)'</l>
<l>*     Message[1] := 'Sampled scene points (cyan)'</l>
<l>*     Message[2] := 'Key points (yellow)'</l>
<l>*     SampledScene := []</l>
<l>*     KeyPoints := []</l>
<l>*     get_surface_matching_result (SurfaceMatchingResultID, 'sampled_scene', 1, SampledScene)</l>
<l>*     get_surface_matching_result (SurfaceMatchingResultID, 'key_points', [], KeyPoints)</l>
<c>    * Visualizing result(s)</c>
<l>*     Message1 := 'Scene: ' + 1</l>
<l>*     Message1[1] := 'Found ' + |ObjectModel3D_Result| + ' object(s) in ' + TimeForMatching$'.3' + ' ms'</l>
<l>*     ScoreString := sum(Score$'.2f' + ' / ')</l>
<l>*     Message1[2] := 'Score(s): ' + ScoreString{0:strlen(ScoreString) - 4}</l>
<l>*     NumResult := |ObjectModel3D_Result|</l>
<l>*     tuple_gen_const (NumResult, 'green', Colors)</l>
<l>*     tuple_gen_const (NumResult, 'circle', Shapes)</l>
<l>*     tuple_gen_const (NumResult, 3, Radii)</l>
<l>*     Indices := [1:NumResult]</l>
<l>    *dev_clear_window ()</l>
<l>*     Instructions[0] := 'Rotate: Left button'</l>
<l>*     Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>*     Instructions[2] := 'Move:   Ctrl  + left button'</l>
<c></c>
<c></c>
<c>    * Clear: Free result(s)</c>
<l>    *clear_object_model_3d (GrabObjectModel3D)</l>
<l>    *clear_object_model_3d (ObjectModel3D_Result)</l>
<l>    *clear_object_model_3d (SampledScene)</l>
<l>    *clear_object_model_3d (KeyPoints)</l>
<l>    *clear_surface_matching_result (SurfaceMatchingResultID)</l>
<l>    *write_object_model_3d(ObjectModel3D_Result, 'ply', 'test.ply', [], [])</l>
<l>    RGB_Scene := RGBA</l>
<l>    ObjectModel_Scene := ObjectModel_Scene</l>
<l>    ObjectModel3D_Result := ObjectModel3D_ResultImg</l>
<c>    </c>
<l>    VisStart := 0</l>
<l>    PoseStart := 3</l>
<c>    </c>
<l>    SavePoseUR := []</l>
<l>    for Index := 0 to SuccessNum-1 by 1</l>
<l>        SavePose := []</l>
<l>        SavePose[0] := VisRotationCenters[VisStart]</l>
<l>        SavePose[1] := VisRotationCenters[VisStart+1]</l>
<l>        SavePose[2] := VisRotationCenters[VisStart+2]</l>
<l>        SavePose[3] := Pose[PoseStart]</l>
<l>        SavePose[4] := Pose[PoseStart+1]</l>
<l>        SavePose[5] := Pose[PoseStart+2]</l>
<l>        SavePose[6] := 0</l>
<c>        </c>
<l>        *Pose := [VisRotationCenters[VisStart], VisRotationCenters[VisStart+1], VisRotationCenters[VisStart+2], Pose[PoseStart], Pose[PoseStart+1], Pose[PoseStart+1] ,0]</l>
<l>        convert_pose_type (SavePose, 'Rp+T', 'rodriguez', 'point', PoseRodriguez)</l>
<l>        RodLeng := sqrt(sum(PoseRodriguez[3:5]*PoseRodriguez[3:5]))</l>
<l>        AngleInRad := 2*atan(RodLeng)</l>
<l>        UnitAxisOfRotation := PoseRodriguez[3:5]/RodLeng</l>
<l>        OrientationVector := UnitAxisOfRotation*AngleInRad</l>
<l>        PoseUR := [PoseRodriguez[0:2], OrientationVector]</l>
<l>        SavePoseUR := [SavePoseUR, PoseUR]</l>
<l>        VisStart := VisStart + 3</l>
<l>        PoseStart := PoseStart + 7</l>
<l>    endfor</l>
<l>    SavePoseStart := 0</l>
<l>    RTVal := []</l>
<l>    for Index := 0 to SuccessNum-1 by 1</l>
<l>        strMerged := 'id:'+Index+','+ \
                 'score:'+Score[Index]+','+ \
                 'x:'+SavePoseUR[SavePoseStart]+','+ \ 
                 'y:'+SavePoseUR[SavePoseStart+1]+','+ \
                 'z:'+SavePoseUR[SavePoseStart+2]+','+ \
                 'rx:'+SavePoseUR[SavePoseStart+3]+','+ \
                 'ry:'+SavePoseUR[SavePoseStart+4]+','+ \
                 'rz:'+SavePoseUR[SavePoseStart+5]+','</l>
<l>        RTVal := [RTVal, strMerged]</l>
<l>        SavePoseStart := SavePoseStart + 6</l>
<l>    endfor</l>
<l>else</l>
<l>    RGB_Scene := RGBA</l>
<l>    ObjectModel_Scene := ObjectModel_Scene</l>
<l>    ObjectModel3D_Result := ObjectModel_Scene</l>
<c>    </c>
<l>    RTVal := 'Faild'</l>
<l>endif</l>
<c></c>
</body>
<docu id="SurfMatch_FileHandle_0_0_2">
<parameters>
<parameter id="FindMethod"/>
<parameter id="KeyPointFraction"/>
<parameter id="MatchResult"/>
<parameter id="MinScore"/>
<parameter id="NumMatch"/>
<parameter id="ObjectModel3D_Result"/>
<parameter id="ObjectModel_Scene"/>
<parameter id="RGB_Scene"/>
<parameter id="RelSamplingDistance"/>
<parameter id="om3FileName"/>
<parameter id="plyFilename"/>
<parameter id="sampleMethod"/>
<parameter id="sampleValue"/>
<parameter id="sfmFileName"/>
<parameter id="smoothlv_val"/>
</parameters>
</docu>
</procedure>
</hdevelop>
